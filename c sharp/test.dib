#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"aliases":[],"name":"csharp"}]}}

#!csharp

Console.WriteLine("Hello, Jupyter with C#!");

#!csharp

public class ExampleClass
{
    // public 메서드: 모든 코드에서 접근 가능
    public void PublicMethod()
    {
        Console.WriteLine("Public method");
    }

    // private 메서드: 동일한 클래스 내에서만 접근 가능
    private void PrivateMethod()
    {
        Console.WriteLine("Private method");
    }

    // protected 메서드: 동일한 클래스 및 파생 클래스에서 접근 가능
    protected void ProtectedMethod()
    {
        Console.WriteLine("Protected method");
    }

    // internal 메서드: 동일한 어셈블리 내에서만 접근 가능
    internal void InternalMethod()
    {
        Console.WriteLine("Internal method");
    }

    // protected internal 메서드: 동일한 어셈블리 내 또는 파생 클래스에서 접근 가능
    protected internal void ProtectedInternalMethod()
    {
        Console.WriteLine("Protected internal method");
    }
}

// ExampleClass 인스턴스 생성 및 메서드 호출
var example = new ExampleClass();
example.PublicMethod();
example.InternalMethod();
example.ProtectedInternalMethod();

//example.ProtectedMethod(); // 에러 발생: protected 메서드는 동일한 클래스 또는 파생 클래스에서만 접근 가능
//example.PrivateMethod(); // 에러 발생: private 메서드는 동일한 클래스 내에서만 접근 가능

#!csharp

public interface IExample
{
    void Display();
    int Calculate(int a, int b);
}
public class ExampleClass : IExample
{
    public void Display()
    {
        Console.WriteLine("Display method implementation");
    }

    public int Calculate(int a, int b)
    {
        return a + b;
    }
}

IExample example = new ExampleClass();
example.Display();
int result = example.Calculate(5, 3);
Console.WriteLine("Result: " + result);
